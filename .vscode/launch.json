{
    // Useful links/commands to investigate source mapping issues.
    //  - https://github.com/bazelbuild/apple_support?tab=readme-ov-file
    //  - dsymutil -s bazel-bin/demo/hello-pkg | grep N_OSO
    //  - dwarfdump --debug-line bazel-out/darwin_x86_64-dbg/bin/demo/_objs/hello-pkg/main.o
    //  - TODO: add lldb investigation commands too

    //TODO: Try Natvis for my types https://code.visualstudio.com/docs/cpp/natvis
    //TODO: Find the way to share settings for different targets (e.g. via variables or "compounds")
    //TODO: use shared .lldbinit setup (instead of similar duplicates) for different:
    //  - build options (relative, absolute in output_base, relative w/ absolute include_dir)
    //  - lldb debuggers (C/C++ ext, CodeLLDB ext, CLion built-in)

    "version": "0.2.0",
    "configurations": [
        // Via C/C++ extension ("cppdbg")
        //  https://code.visualstudio.com/docs/cpp/launch-json-reference#_sourcefilemap
        {
            "name": "hello-pkg (C/C++)",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/bazel-bin/demo/hello-pkg-bin",
            "args": [],
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "lldb",
            "sourceFileMap": {
                // Workaround for Bazel 8 default build location of external deps
                "external": "${workspaceFolder}/bazel-${workspaceFolderBasename}/external",
                // Workaround for debugging externals in build from CLion (makes relative sym paths but w/ absolute root)
                "${workspaceFolder}/external": "${workspaceFolder}/bazel-${workspaceFolderBasename}/external",
            },
            "setupCommands": [
                {
                    // Workaround for strange lldb behaviour in C/C++ extension:
                    //  it seems to ignore default working directory to map source 
                    //  and "sourceFileMap" doesn't support "." mapping.
                    "text": "settings set target.source-map . ${workspaceFolder}",
                    "ignoreFailures": false
                }
            ],
            "preLaunchTask": "hello-pkg (dbg)",
            // "stopAtEntry": true,
        },

        // Via CodeLLDB extension ("lldb")
        //  https://github.com/vadimcn/codelldb/blob/master/MANUAL.md
        {
            "name": "hello-pkg (CodeLLDB)",
            "type": "lldb",
            "request": "launch",
            "program": "${workspaceFolder}/bazel-bin/demo/hello-pkg-bin",
            "cwd": "${workspaceFolder}/bazel-bin/demo",
            "initCommands": [
                //TODO: optional dev setup: 
                // "command source ~/.lldbinit",
                // "command source ${workspaceFolder}/.lldbinit",

                // Workaround multi-root workspace issue of CoreLLDB: it executes lldb 
                //  in the root of workspace instead of workspaceFolder and relative sources cannot be found.
                // So set working directory the same as debug launhed from VSCode in workspaceFolder.
                "platform setting -w ${workspaceFolder}",
                // Workaround for Bazel 8 default build location of external deps ("sourceFileMap" can be used instead)
                "settings set target.source-map external ${workspaceFolder}/bazel-${workspaceFolderBasename}/external",
                // Workaround for debugging externals in build from CLion (makes relative sym paths but w/ absolute root)
                "settings set target.source-map ${workspaceFolder}/external ${workspaceFolder}/bazel-${workspaceFolderBasename}/external",
                // "b main", // better than stopOnEntry (stops in _start)
            ],
            "preLaunchTask": "hello-pkg (dbg)",
            // "stopOnEntry": true
        }
    ]
}